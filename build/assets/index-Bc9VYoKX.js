var d=Object.defineProperty;var l=(o,t,s)=>t in o?d(o,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):o[t]=s;var n=(o,t,s)=>l(o,typeof t!="symbol"?t+"":t,s);function g(){import.meta.url,import("_").catch(()=>1),async function*(){}().next()}(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))i(e);new MutationObserver(e=>{for(const h of e)if(h.type==="childList")for(const a of h.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function s(e){const h={};return e.integrity&&(h.integrity=e.integrity),e.referrerPolicy&&(h.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?h.credentials="include":e.crossOrigin==="anonymous"?h.credentials="omit":h.credentials="same-origin",h}function i(e){if(e.ep)return;e.ep=!0;const h=s(e);fetch(e.href,h)}})();const r={x:0,y:0};class u{constructor(t){n(this,"canvas");n(this,"ctx");n(this,"mode","idle");n(this,"hasMoved",!1);n(this,"panStart",r);n(this,"offset",r);n(this,"lastOffset",r);n(this,"strokes",[]);n(this,"currentStroke",null);n(this,"scale",1);n(this,"lastScale",1);n(this,"pinchStartDist",0);n(this,"pinchStartMid",r);n(this,"pinchStartOffset",r);n(this,"gestureInitialDist",0);n(this,"gestureInitialMid",r);n(this,"gestureThreshold",10);this.canvas=document.getElementById(t),this.ctx=this.canvas.getContext("2d"),this.setupCanvas(),this.setupEventListeners()}setupCanvas(){this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight,this.ctx.strokeStyle="#000000",this.ctx.lineWidth=3,this.ctx.lineCap="round",this.ctx.lineJoin="round"}setupEventListeners(){this.canvas.addEventListener("mousedown",this.startDrawing.bind(this)),this.canvas.addEventListener("mousemove",this.draw.bind(this)),this.canvas.addEventListener("mouseup",this.stopDrawing.bind(this)),this.canvas.addEventListener("mouseout",this.stopDrawing.bind(this)),this.canvas.addEventListener("touchstart",this.handleTouchStart.bind(this)),this.canvas.addEventListener("touchmove",this.handleTouchMove.bind(this)),this.canvas.addEventListener("touchend",this.handleTouchEnd.bind(this)),this.canvas.addEventListener("touchcancel",this.handleTouchEnd.bind(this))}handleTouchStart(t){t.touches.length===2?(this.mode="pending",this.gestureInitialDist=this.getPinchDistance(t),this.gestureInitialMid=this.getAverageCoordinates(t)):t.touches.length===1&&this.startDrawing(t)}handleTouchMove(t){if(t.touches.length===2)if(this.mode==="pending"){const s=this.getPinchDistance(t),i=this.getAverageCoordinates(t),e=Math.abs(s-this.gestureInitialDist),h=Math.hypot(i.x-this.gestureInitialMid.x,i.y-this.gestureInitialMid.y);e>this.gestureThreshold?this.startZooming(t):h>this.gestureThreshold&&this.startPanning(t)}else this.mode==="zooming"?this.continueZooming(t):this.mode==="panning"&&this.continuePanning(t);else this.mode==="drawing"&&t.touches.length===1&&this.draw(t)}handleTouchEnd(t){(this.mode==="zooming"||this.mode==="panning")&&t.touches.length<2?(this.mode==="zooming"&&this.stopZooming(),this.mode==="panning"&&this.stopPanning()):this.mode==="drawing"&&t.touches.length===0&&this.stopDrawing()}startZooming(t){this.mode==="drawing"&&this.cutoffDrawing(),this.mode="zooming",this.pinchStartDist=this.getPinchDistance(t),this.lastScale=this.scale,this.pinchStartMid=this.getAverageCoordinates(t),this.pinchStartOffset={...this.offset}}continueZooming(t){const s=this.getPinchDistance(t);if(this.pinchStartDist===0)return;let i=this.lastScale*(s/this.pinchStartDist);i=Math.max(.2,Math.min(i,5));const e=this.getAverageCoordinates(t),h=(e.x-this.pinchStartMid.x)/this.scale,a=(e.y-this.pinchStartMid.y)/this.scale,c=i/this.lastScale;this.offset={x:this.pinchStartOffset.x+h-(this.pinchStartMid.x-this.pinchStartOffset.x)*(c-1),y:this.pinchStartOffset.y+a-(this.pinchStartMid.y-this.pinchStartOffset.y)*(c-1)},this.scale=i,this.redraw()}stopZooming(){this.mode="idle",this.pinchStartDist=0}startPanning(t){this.mode==="drawing"&&this.cutoffDrawing(),this.mode="panning",this.panStart=this.getAverageCoordinates(t),this.lastOffset=this.offset}continuePanning(t){const s=this.getAverageCoordinates(t);this.offset={x:this.lastOffset.x+(s.x-this.panStart.x),y:this.lastOffset.y+(s.y-this.panStart.y)},this.redraw()}stopPanning(){this.mode="idle",this.panStart={x:0,y:0}}startDrawing(t){if(this.mode!=="idle")return;this.mode="drawing",this.hasMoved=!1;const s=this.getCoordinates(t);this.currentStroke={points:[s],color:this.ctx.strokeStyle,width:this.ctx.lineWidth}}draw(t){var i;if(this.mode!=="drawing")return;this.hasMoved=!0;const s=this.getCoordinates(t);(i=this.currentStroke)==null||i.points.push(s),this.redraw()}stopDrawing(){this.mode==="drawing"&&(this.currentStroke&&(this.strokes.push(this.currentStroke),this.currentStroke=null),this.redraw(),this.mode="idle")}getCoordinates(t){const s=this.canvas.getBoundingClientRect(),i=t instanceof MouseEvent?t:t.touches[0]||t.changedTouches[0];return{x:(i.clientX-s.left-this.offset.x)/this.scale,y:(i.clientY-s.top-this.offset.y)/this.scale}}getAverageCoordinates(t){return{x:(t.touches[0].clientX+t.touches[1].clientX)/2,y:(t.touches[0].clientY+t.touches[1].clientY)/2}}getPinchDistance(t){const s=t.touches[0].clientX-t.touches[1].clientX,i=t.touches[0].clientY-t.touches[1].clientY;return Math.sqrt(s*s+i*i)}cutoffDrawing(){this.mode==="drawing"&&(this.hasMoved?this.stopDrawing():(this.currentStroke=null,this.redraw()))}redraw(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height),this.ctx.save(),this.ctx.translate(this.offset.x,this.offset.y),this.ctx.scale(this.scale,this.scale),this.drawStrokes(),this.ctx.restore()}drawStrokes(){const t=this.currentStroke?this.strokes.concat([this.currentStroke]):this.strokes;for(const s of t)this.ctx.strokeStyle=s.color,this.ctx.lineWidth=s.width,this.ctx.beginPath(),this.ctx.moveTo(s.points[0].x,s.points[0].y),s.points.forEach(i=>this.ctx.lineTo(i.x,i.y)),this.ctx.stroke()}}document.addEventListener("DOMContentLoaded",()=>{new u("whiteboard")});export{g as __vite_legacy_guard};
